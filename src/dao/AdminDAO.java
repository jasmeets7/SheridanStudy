package dao;

import java.sql.Connection;
import java.sql.PreparedStatement;
import java.sql.ResultSet;
import java.sql.SQLException;
import java.util.ArrayList;

import model.User;
import util.DBUtil;

public class AdminDAO {
	
	public void deleteUser(User u) {
		Connection conn = null;
		
		try {
			conn = DBUtil.getConnection();
			
			if(u.isAdmin()) {
				PreparedStatement pStmt2 = conn.prepareStatement("DELETE FROM admin WHERE adminid=?");
				pStmt2.setInt(1, u.getUserId());
				pStmt2.executeUpdate();
			}
			
			PreparedStatement pStmt = conn.prepareStatement("DELETE FROM user WHERE userid=?");
			pStmt.setInt(1, u.getUserId());
			pStmt.executeUpdate();
			
			
			
		} catch(SQLException e) {
			e.printStackTrace();
		} catch(Exception e) {
			e.printStackTrace();
		} finally {
			DBUtil.closeConnection(conn);
		}
	}
	
	public ArrayList<User> getAllUsers() {
		Connection conn = null;
		ArrayList<User> users = new ArrayList<>();
		
		try {
			conn = DBUtil.getConnection();
			//get all users
			PreparedStatement pStmt = conn.prepareStatement("SELECT * FROM user");
			ResultSet rs = pStmt.executeQuery();
			
			while(rs.next()) {
				User u = new User();
				u.setUserId(rs.getInt("userid"));
				u.setFirstName(rs.getString("first_name"));
				u.setLastName(rs.getString("last_name"));
				users.add(u);
			}
			
			//check which users are admins
			PreparedStatement pStmt2 = conn.prepareStatement("SELECT * FROM admin");
			ResultSet rs2 = pStmt2.executeQuery();
			while(rs2.next()) {
				int adminId = rs2.getInt("adminid");
				for(User user : users) {
					if(user.getUserId() == adminId) {
						user.setAdmin(true);
					}
				}
			}
			
		} catch(SQLException e) {
			e.printStackTrace();
		} catch(Exception e) {
			e.printStackTrace();
		} finally {
			DBUtil.closeConnection(conn);
		}
		
		return users;
	}
	
	public User addUser(User u) {
		Connection conn = null;
		
		try {
			conn = DBUtil.getConnection();
			
			PreparedStatement pStmt = conn.prepareStatement("INSERT INTO user (first_name, last_name, password) VALUES (?,?,?)");
			pStmt.setString(1, u.getFirstName());
			pStmt.setString(2, u.getLastName());
			pStmt.setString(3, u.getPassword());
			pStmt.executeUpdate();
			
			//get max userid and increment by one to get new userid generated by db
			PreparedStatement pStmt2 = conn.prepareStatement("SELECT MAX(userid) FROM user;");
			ResultSet rs = pStmt2.executeQuery();
			if(rs.next()) {
				u.setUserId(rs.getInt("MAX(userid)"));
			}
						
			//if new user is an admin, add to admin table
			if(u.isAdmin()) {
				PreparedStatement pStmt3 = conn.prepareStatement("INSERT INTO admin (adminid) VALUES (?);");
				pStmt3.setInt(1, u.getUserId());
				pStmt3.executeUpdate();
			}
			
		} catch(SQLException e) {
			e.printStackTrace();
		} catch(Exception e) {
			e.printStackTrace();
		} finally {
			DBUtil.closeConnection(conn);
		}
		
		return u;
	}
	
}
